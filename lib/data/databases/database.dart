
import 'dart:io';

import 'package:drift/drift.dart';
import 'package:flutter/services.dart' show rootBundle;
import 'package:drift/native.dart';
import 'package:path/path.dart' as p;
import 'package:path_provider/path_provider.dart';
import 'package:sqlite3/sqlite3.dart';
import 'package:sqlite3_flutter_libs/sqlite3_flutter_libs.dart';

part 'database.g.dart'; // Generated by drift

// Define models for each table
@DataClassName('DayInfo')
class DayInfoTable extends Table {
  IntColumn get day => integer()();
  IntColumn get isComplete => integer().nullable()();
  TextColumn get ayat => text()();
  TextColumn get ayat_bangla => text()();
  TextColumn get hadith => text()();
  TextColumn get dua => text()();
  TextColumn get dua_bangla => text()();
  TextColumn get daily_task => text()();
  TextColumn get asmaul_husna_1 => text()();
  TextColumn get asmaul_husna_1_bangla => text()();
  TextColumn get asmaul_husna_2 => text()();
  TextColumn get asmaul_husna_2_bangla => text()();
  TextColumn get asmaul_husna_3 => text()();
  TextColumn get asmaul_husna_3_bangla => text()();

  @override
  Set<Column> get primaryKey => {day};
}

@DataClassName('DayInsert')
class DayInsertTable extends Table {
  IntColumn get day => integer()();
  TextColumn get ayat_tracker => text()();
  TextColumn get page_tracket => text()();
  TextColumn get para_tracker => text()();
  TextColumn get daily_achievement => text()();

  //check box
  IntColumn get fajr_fard => integer().nullable()();
  IntColumn get fajr_sunnah => integer().nullable()();
  IntColumn get fajr_jamat => integer().nullable()();
  IntColumn get duhur_fard => integer().nullable()();
  IntColumn get duhur_sunnah => integer().nullable()();
  IntColumn get duhur_jamat => integer().nullable()();
  IntColumn get asr_fard => integer().nullable()();
  IntColumn get asr_sunnah => integer().nullable()();
  IntColumn get asr_jamat => integer().nullable()();
  IntColumn get maghrib_fard => integer().nullable()();
  IntColumn get maghrib_sunnah => integer().nullable()();
  IntColumn get maghrib_jamat => integer().nullable()();
  IntColumn get isha_fard => integer().nullable()();
  IntColumn get isha_sunnah => integer().nullable()();
  IntColumn get isha_jamat => integer().nullable()();
  IntColumn get tarabih => integer().nullable()();
  IntColumn get duha => integer().nullable()();
  IntColumn get dukhulul_masjid => integer().nullable()();
  IntColumn get tahiyatul_wudu => integer().nullable()();
  IntColumn get morning_zikr => integer().nullable()();
  IntColumn get evening_zikr => integer().nullable()();
  IntColumn get donation => integer().nullable()();
  IntColumn get daily_task => integer().nullable()();
  IntColumn get salah_in_jamat => integer().nullable()();
  IntColumn get istegfar_70 => integer().nullable()();
  IntColumn get tilawatul_quran => integer().nullable()();
  IntColumn get memorising_asmaul_husna => integer().nullable()();
  IntColumn get memorising_dua => integer().nullable()();
  IntColumn get memorising_hadith => integer().nullable()();
  IntColumn get memorising_ayat => integer().nullable()();
  IntColumn get learning_new_something => integer().nullable()();
  IntColumn get zikr_before_sleep => integer().nullable()();


  @override
  Set<Column> get primaryKey => {day};
}


LazyDatabase _openConnection() {
  return LazyDatabase(() async {
    // put the database file, called db.sqlite here, into the documents folder
    // for your app.
    final dbFolder = await getApplicationDocumentsDirectory();
    final file = File(p.join(dbFolder.path, 'ramadan_planner.sqlite'));

    if (!await file.exists()) {
      // Extract the pre-populated database file from assets
      final blob = await rootBundle.load('assets/ramadan_planner.db');
      final buffer = blob.buffer;
      await file.writeAsBytes(buffer.asUint8List(blob.offsetInBytes, blob.lengthInBytes));
      print('Data import completed.');
    }

    // Also work around limitations on old Android versions
    if (Platform.isAndroid) {
      await applyWorkaroundToOpenSqlite3OnOldAndroidVersions();
    }

    // Make sqlite3 pick a more suitable location for temporary files - the
    // one from the system may be inaccessible due to sandboxing.
    final cachebase = (await getTemporaryDirectory()).path;
    // We can't access /tmp on Android, which sqlite3 would try by default.
    // Explicitly tell it about the correct temporary directory.
    sqlite3.tempDirectory = cachebase;

    return NativeDatabase.createInBackground(file);
  });
}

// Define Database
@DriftDatabase(tables: [DayInfoTable, DayInsertTable])
class AppDatabase extends _$AppDatabase {
  AppDatabase() : super(_openConnection());

  @override
  int get schemaVersion => 1; // Define the current schema version

// Define migration strategies (if needed)
  @override
  MigrationStrategy get migration => MigrationStrategy(
    onUpgrade: (migrator, from, to) async {
      if (from == 1) {
        // Perform migration from version 1 to version 2
        // Example: migrator.createTable(...);
      }
    },
  );


  // Define methods to interact with the database
  Future<List<DayInfo>> getAllDayInfo() async => select(dayInfoTable).get();
  // Future<List<Chapter>> getAllChapters() async => select(chapterTable).get();
  //
  // //getting chapters by book id
  // Future<List<Chapter>> getChaptersByBookId(int id) async => (select(chapterTable)..where((tbl) => tbl.book_id.equals(id))).get();
  //
  // //getting hadiths by book id and chapter id
  // Future<List<Hadith>> getHadithByBookAndChapterId(int bookId, int chapterId) async {
  //   final query = select(hadithTable)
  //     ..where((tbl) => tbl.book_id.equals(bookId) & tbl.chapter_id.equals(chapterId));
  //
  //   return query.get();
  // }
  //
  // //getting sections by chapter id and book id
  // Future<List<Section>> getSectionByBookIdAndChapterId(int bookId, int chapterId) async {
  //   final query = select(sectionTable)
  //     ..where((tbl) => tbl.book_id.equals(bookId) & tbl.chapter_id.equals(chapterId));
  //
  //   return query.get();
  // }

// Future<List<Hadith>> getAllHadiths() => select(hadithTable).get();
// Future<List<Section>> getAllSections() => select(sectionTable).get();


}


